CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP()
);

CREATE TABLE decks (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  owner INT,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  is_favorite TINYINT(1) DEFAULT 0,
  UNIQUE (owner, name),
  FOREIGN KEY (owner) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE cards (
  id INT PRIMARY KEY AUTO_INCREMENT,
  question TEXT NOT NULL,
  answer TEXT NOT NULL,
  score FLOAT NOT NULL DEFAULT 0,
  deck_id INT,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  FOREIGN KEY (deck_id) REFERENCES decks(id) ON DELETE CASCADE
);

CREATE TABLE deck_links (
  id INT PRIMARY KEY AUTO_INCREMENT,
  deck_id INT,
  generated_by INT,
  link_code VARCHAR(255) NOT NULL UNIQUE,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  FOREIGN KEY (deck_id) REFERENCES decks(id) ON DELETE CASCADE,
  FOREIGN KEY (generated_by) REFERENCES users(id) ON DELETE SET NULL
);

CREATE TABLE deck_likes (
  id INT PRIMARY KEY AUTO_INCREMENT,
  deck_link_id INT,
  user_id INT,
  liked_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  UNIQUE (deck_link_id, user_id),
  FOREIGN KEY (deck_link_id) REFERENCES deck_links(id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE statistics (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT NOT NULL,
  card_id INT NOT NULL,
  difficulty CHAR(4) NOT NULL CHECK (difficulty IN ('easy', 'good', 'hard')),
  time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (card_id) REFERENCES cards(id) ON DELETE CASCADE
);